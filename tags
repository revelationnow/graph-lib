!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
FALSE	common.hpp	/^enum boolean {FALSE, TRUE};$/;"	e	enum:boolean
Graph	graph.hpp	/^class Graph$/;"	c
Graph	graph.hpp	/^Graph<Tnode,Tlink>::Graph()$/;"	f	class:Graph
Link_base	common.hpp	/^class Link_base$/;"	c
Link	node.hpp	/^class Link : public Link_base$/;"	c
Link	node.hpp	/^Link<Tlink,Tnode>::Link()$/;"	f	class:Link
Link	node.hpp	/^Link<Tlink,Tnode>::Link(Tlink weight)$/;"	f	class:Link
Node_base	common.hpp	/^class Node_base$/;"	c
Node	node.hpp	/^class Node : public Node_base$/;"	c
Node	node.hpp	/^Node<Tnode,Tlink>::Node()$/;"	f	class:Node
Node	node.hpp	/^Node<Tnode,Tlink>::Node(Tnode value)$/;"	f	class:Node
OUTPUT_MSG	errHandler.hpp	6;"	d
PRINT_TAG	errHandler.hpp	5;"	d
TRUE	common.hpp	/^enum boolean {FALSE, TRUE};$/;"	e	enum:boolean
_ERRHANDLER_HPP_	errHandler.hpp	3;"	d
__COMMON_HPP_	common.hpp	3;"	d
__GRAPH_HPP_	graph.hpp	3;"	d
__LINK_HPP_	link.hpp	3;"	d
__NODE_HPP_	node.hpp	3;"	d
addLinkToGraph	graph.hpp	/^int Graph<Tnode,Tlink>::addLinkToGraph(Link<Tlink,Tnode>** link)$/;"	f	class:Graph
addNodeToGraph	graph.hpp	/^int Graph<Tnode,Tlink>::addNodeToGraph(Node<Tnode,Tlink>* node)$/;"	f	class:Graph
attachLinkToNodeAtEdge	graph.hpp	/^int Graph<Tnode,Tlink>::attachLinkToNodeAtEdge(int lid, int nid, int edge)$/;"	f	class:Graph
boolean	common.hpp	/^enum boolean {FALSE, TRUE};$/;"	g
detachLinkFromNodeAtEdge	graph.hpp	/^int Graph<Tnode,Tlink>::detachLinkFromNodeAtEdge(int lid, int nid, int edge)$/;"	f	class:Graph
detachNodeByEdge	node.hpp	/^void Link<Tlink,Tnode>::detachNodeByEdge(int edge)$/;"	f	class:Link
displayGraph	graph.hpp	/^int Graph<Tnode,Tlink>::displayGraph()$/;"	f	class:Graph
getDegree	node.hpp	/^int Node<Tnode,Tlink>::getDegree()$/;"	f	class:Node
getId	node.hpp	/^int Link<Tlink,Tnode>::getId()$/;"	f	class:Link
getId	node.hpp	/^int Node<Tnode,Tlink>::getId()$/;"	f	class:Node
getLinkById	graph.hpp	/^Link<Tlink,Tnode>* Graph<Tnode,Tlink>::getLinkById(int lid)$/;"	f	class:Graph
getNodeAtEdge	node.hpp	/^Node<Tnode,Tlink>* Link<Tlink,Tnode>::getNodeAtEdge(int edge)$/;"	f	class:Link
getNodeById	graph.hpp	/^Node<Tnode,Tlink>* Graph<Tnode,Tlink>::getNodeById(int nid)$/;"	f	class:Graph
getValue	node.hpp	/^Tnode Node<Tnode,Tlink>::getValue()$/;"	f	class:Node
graph_id_	graph.hpp	/^    int graph_id_;$/;"	m	class:Graph
linkAttachedToNode	node.hpp	/^boolean Node<Tnode,Tlink>::linkAttachedToNode(Link<Tlink,Tnode>* link)$/;"	f	class:Node
link_id_	node.hpp	/^    int link_id_;$/;"	m	class:Link
links_	graph.hpp	/^    list<Link<Tlink,Tnode>*> links_;$/;"	m	class:Graph
links_	node.hpp	/^    list<Link<Tnodelink,Tnode>*> links_;$/;"	m	class:Node
main	main.cpp	/^int main()$/;"	f
node_id_	node.hpp	/^    int node_id_;$/;"	m	class:Node
node_	node.hpp	/^    Node<Tnode,Tlink>* node_[2];$/;"	m	class:Link
nodes_	graph.hpp	/^    list<Node<Tnode,Tlink>*> nodes_;$/;"	m	class:Graph
removeLink	node.hpp	/^int Node<Tnode,Tlink>::removeLink(Link<Tlink,Tnode>* link)$/;"	f	class:Node
setValue	node.hpp	/^void Node<Tnode,Tlink>::setValue(Tnode value)$/;"	f	class:Node
total_graph_ids	graph.hpp	/^    static int total_graph_ids;$/;"	m	class:Graph
total_graph_ids	graph.hpp	/^int Graph<Tnode,Tlink>::total_graph_ids = 0;$/;"	m	class:Graph
total_graphs	graph.hpp	/^    static int total_graphs;$/;"	m	class:Graph
total_graphs	graph.hpp	/^int Graph<Tnode,Tlink>::total_graphs = 0;$/;"	m	class:Graph
total_link_ids	node.hpp	/^    static int total_link_ids;$/;"	m	class:Link
total_link_ids	node.hpp	/^int Link<Tlink,Tnode>::total_link_ids = 0;$/;"	m	class:Link
total_links	node.hpp	/^    static int total_links;$/;"	m	class:Link
total_links	node.hpp	/^int Link<Tlink,Tnode>::total_links = 0;$/;"	m	class:Link
total_node_ids	node.hpp	/^    static int total_node_ids;$/;"	m	class:Node
total_node_ids	node.hpp	/^int Node<Tnode,Tlink>::total_node_ids = 0;$/;"	m	class:Node
total_nodes	node.hpp	/^    static int total_nodes;$/;"	m	class:Node
total_nodes	node.hpp	/^int Node<Tnode,Tlink>::total_nodes = 0;$/;"	m	class:Node
value_	node.hpp	/^    Tnode value_;$/;"	m	class:Node
weight_	node.hpp	/^    Tlink weight_;$/;"	m	class:Link
